/* view transition */
@view-transition {
  navigation: auto;
}

@layer reset {
  /* the reset here */

  /* Box sizing rules */
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  /* Prevent font size inflation */
  /* IOS device when turn landscape change size (inflation) this will prevent it */
  html {
    -moz-text-size-adjust: none;
    -webkit-text-size-adjust: none;
    text-size-adjust: none;
  }

  /* Remove default margin in favour of better control in authored CSS */
  /* similar with * {margin: 0} but more specific */
  body,
  h1,
  h2,
  h3,
  h4,
  p,
  figure,
  blockquote,
  dl,
  dd {
    margin: 0;
  }

  /* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
  /* safari stuff */
  ul[role="list"],
  ol[role="list"] {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  /* Set core body defaults */
  body {
    /* min-height: 100vh; */
    min-block-size: 100vh;
    /* default line height 1.4-ish */
    line-height: 1.6;
  }

  /* Set shorter line heights on headings and interactive elements */
  h1,
  h2,
  h3,
  h4,
  button,
  input,
  label {
    line-height: 1.1;
  }

  /* Balance text wrapping on headings */
  h1,
  h2,
  h3,
  h4 {
    /* balancing the typography looks when screen are adjusted to the next line */
    text-wrap: balance;
  }

  p,
  li {
    /* still in cromium browser pretty new thing */
    /* prevent a tailing orphan typography (hanging one word) */
    text-wrap: pretty;
  }

  /* A elements that don't have a class get default styles */
  a:not([class]) {
    text-decoration-skip-ink: auto;
    color: currentColor;
  }

  /* Make images easier to work with */
  img,
  picture {
    /* max-width: 100%; */
    /* logical property same as width (left to right vertical) */
    max-inline-size: 100%;
    display: block;
  }

  /* Inherit fonts for inputs and buttons */
  input,
  button,
  textarea,
  select {
    font: inherit;
  }

  /* Make sure textareas without a rows attribute are not tiny */
  textarea:not([rows]) {
    min-height: 10em;
  }

  /* Anything that has been anchored to should have extra scroll margin */
  :target {
    scroll-margin-block: 5ex;
  }
}

@layer base {
  /* :root custom props + base/global styles here */

  /* root for global variables */
  :root {
    --clr-white: hsl(0, 0%, 100%);
    --clr-gray-100: hsl(0, 2%, 79%);
    --clr-brand-400: hsl(25, 88%, 75%);
    --clr-brand-500: hsl(25, 88%, 66%);
    --clr-green-400: hsl(143, 19%, 49%);
    --clr-green-500: hsl(143, 38%, 37%);
    --clr-green-600: hsl(145, 29%, 19%);
    --clr-brown-500: hsl(10, 5%, 25%);
    --clr-brown-600: hsl(9, 7%, 21%);
    --clr-brown-700: hsl(9, 8%, 16%);
    --clr-brown-800: hsl(0, 6%, 15%);
    --clr-brown-900: hsl(0, 6%, 13%);

    --clr-orange-500: hsl(28, 43%, 28%);
    --clr-red-500: hsl(359, 34%, 24%);
    --clr-teal-500: hsl(186, 42%, 25%);

    --ff-heading: "Outfit", sans-serif;
    --ff-body: "Fira Sans", sans-serif;

    --fs-300: 0.875rem;
    --fs-400: 1rem;
    --fs-500: 1.125rem;
    --fs-600: 1.25rem;
    --fs-700: 1.5rem;
    --fs-800: 2rem;
    --fs-900: 3.75rem;
    --fs-1000: 3.75rem;

    /* the same as min-width 760 */
    @media (width > 760px) {
      --fs-300: 0.875rem;
      --fs-400: 1rem;
      --fs-500: 1.25rem;
      --fs-600: 1.5rem;
      --fs-700: 2rem;
      --fs-800: 3rem;
      --fs-900: 5rem;
      --fs-1000: 7.5rem;
    }
  }

  :root {
    /* primitives here */
    --text-main: var(--clr-gray-100);
    --text-high-contrast: var(--clr-white);
    --text-brand: var(--clr-brand-500);
    --text-brand-light: var(--clr-brand-400);

    --background-accent-light: var(--clr-green-400);
    --background-accent-main: var(--clr-green-500);
    --background-accent-dark: var(--clr-green-600);

    --background-extra-light: var(--clr-brown-500);
    --background-light: var(--clr-brown-600);
    --background-main: var(--clr-brown-700);
    --background-dark: var(--clr-brown-800);
    --background-extra-dark: var(--clr-brown-900);

    --font-size-heading-sm: var(--fs-700);
    --font-size-heading-regular: var(--fs-800);
    --font-size-heading-lg: var(--fs-900);
    --font-size-heading-xl: var(--fs-1000);

    --font-size-sm: var(--fs-300);
    --font-size-regular: var(--fs-400);
    --font-size-md: var(--fs-500);
    --font-size-lg: var(--fs-600);

    --border-radius-1: 0.25rem;
    --border-radius-2: 0.5rem;
    --border-radius-3: 0.75rem;
  }

  /* base */

  /* accessibility for motion sickness */
  @media (prefers-reduced-motion: no-preference) {
    /* more accessible smooth scrolling */
    html {
      scroll-behavior: smooth;
    }
  }

  html {
    font-family: var(--ff-body);
    line-height: 1.6;

    /* add space or gap when jumping to section */
    scroll-padding: 2rem;
  }

  body {
    font-size: var(--font-size-regular);
    color: var(--text-main);
    background-color: var(--background-main);
  }

  h1,
  h2,
  h3,
  h4 {
    font-family: var(--ff-heading);
    font-weight: 700;
    color: var(--text-high-contrast);
  }

  a {
    color: var(--text-high-contrast);
  }

  a:hover,
  a:focus-visible {
    color: var(--text-brand-light);
  }

  img {
    border-radius: var(--border-radius-3);
  }
}

@layer layout {
  /* for generic elements */

  .flex-group {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  /* bring flow or spacing back after reset */
  /* " * + * " only select element without preceding sibling / not first child   */
  .flow > * + * {
    margin-top: var(--flow-spacer, 1em);
  }

  .grid-flow {
    display: grid;
    gap: var(--grid-flow-gap, 1rem);
  }

  /* auto-fit is the default "best" choice but if the design require can use auto-fill */
  .grid-auto-fill {
    --grid-auto-fit-min-column-size: 250px;
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(
      auto-fill,
      minmax(min(var(--grid-auto-fit-min-column-size), 100%), 1fr)
    );
  }

  .equal-columns {
    display: grid;
    /* declaring variable var(name, value) */
    gap: var(--equal-columns-gap, 1rem);
    align-items: var(--equal-columns-vertical-alignment, stretch);

    /* breakpoint */
    @media (width > 760px) {
      grid-auto-flow: column;
      /* make the columns equal size */
      grid-auto-columns: 1fr;
    }

    /* data  attribute. Can use modifier class instead */
    &[data-gap="large"] {
      --equal-columns-gap: 2rem;
    }

    &[data-alignment="centered"] {
      --equal-columns-vertical-alignment: center;
    }

    &[data-vertical-alignment="bottom"] {
      --column-layout-alignment: end;
    }
  }

  /* if using flex and make columns equal size */
  .flex-equal-columns {
    display: flex;

    /* select all child */
    > * {
      flex: 1;
    }
  }

  .section {
    --padding: 3.75rem;

    /* logical property same as padding-top */
    padding-block: var(--padding);

    @media (width > 760px) {
      --padding: 8rem;

      &[data-padding="compact"] {
        --padding: 4.5rem;
      }
    }
  }

  .wrapper {
    /* locally scooped custom property */
    --wrapper-max-width: 1130px;

    /* or use max-width: calc(1130px + 2rem) to add the padding (two side) manually */
    max-width: var(--wrapper-max-width);
    /* same as margin: 0 auto */
    margin-inline: auto;
    padding-inline: 1rem;
    /* from figma file the width 1130px but because added padding 1rem (16px) on each side, the width size will be change because css reset box-sizing. So turn box-sizing back to content-box to get the desired 1130px */
    box-sizing: content-box;

    /* nesting modifier */
    &[data-width="narrow"] {
      --wrapper-max-width: 720px;
    }

    &[data-width="wide"] {
      --wrapper-max-width: 1330px;
    }
  }

  /* modifier same as .wrapper--wide or .wrapper--narrow */
  /* .wrapper[data-width="wide"] {

  } */
}

@layer components {
  /* for specific elements */

  .skip-to-main:not(:focus) {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  .skip-to-main {
    background: var(--clr-green-500);
    font-size: var(--fs-600);
    padding: 1rem;
    position: absolute;
    top: 1rem;
    left: 1rem;
    border-radius: var(--border-radius-3);
    color: white;
  }

  .site-header {
    padding-block: 1rem;

    /* Better overflow-x: hidden */
    overflow-x: clip;
  }

  .site-header__inner {
    display: flex;
    /* to make the wrapping whitespace more even looking */
    gap: 0.5rem 1rem;
    flex-wrap: wrap;
    justify-content: space-between;
  }

  /* using aria as a selector */
  [aria-controls="primary-nav"] {
    /* make sure button on top layer */
    /* able to use z-index without position because it can be use in grid and flex. this button is child flex */
    z-index: 100;
    cursor: pointer;
    background: transparent;
    border: 0;

    /* reset border radius */
    img {
      border-radius: 0;
    }
  }

  /* hide button when big screen */
  [aria-controls="primary-nav"] {
    display: none;
  }

  .primary-navigation {
    /* nesting same as .primary-navigation ul {} */
    ul {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem 1rem;
    }

    a {
      text-decoration: none;
    }

    /* for mobile */
    /* same as max-width: 760px */
    @media (width < 760px) {
      /* to make the button disappear */
      display: none;

      /* animation */
      opacity: 0;
      transition: opacity 1s, display 1s, translate 1s;
      /* allowing display none to block animation */
      transition-behavior: allow-discrete;
      translate: 100% 0;

      position: absolute;
      z-index: 10;
      top: 0;
      right: 0;
      font-size: var(--font-size-lg);
      font-weight: 700;
      font-family: var(--ff-heading);
      background-color: var(--background-accent-main);
      padding: 2rem;
      border-radius: 0 0 0 var(--border-radius-3);

      ul {
        gap: 0;
        flex-direction: column;
      }

      /* list animation */
      li {
        opacity: 0;
        translate: 100%;

        transition: opacity 300ms translate 875ms;
        transition-delay: var(--delay, 125ms);

        /* stagger transition */
        /* same as li:nth-child(2) */
        &:nth-child(2) {
          --delay: 250ms;
        }

        &:nth-child(3) {
          --delay: 325ms;
        }
      }

      /* reverse * + *  */
      li + li {
        /* logical property same as margin-top: 2rem; */
        margin-block-start: 1.5rem;
        padding-block-start: 1.5rem;
        border-top: 2px solid var(--background-accent-light);
      }

      /* the nesting version of bellow */
      /* the "&" is .primary-navigation (parent) */
      /* [aria-expanded="true"] ~ & {
        display: block;
      } */
    }
  }
  /* to make the button appear */
  @media (width < 760px) {
    /* button only appear on small screen */
    [aria-controls="primary-nav"] {
      display: block;
    }

    /* the "~" element looking at the direct sibling that come before. can also use "+" */
    /* so only works when aria-expanded is true before .primary-navigation */
    /* can also toggle class on and off */
    [aria-expanded="true"] ~ .primary-navigation {
      display: block;

      opacity: 1;
      translate: 0 0;

      /* allowing fade in by declaring starting style*/
      @starting-style {
        opacity: 0;
        translate: 0 -100%;
      }

      li {
        translate: 0;
        opacity: 1;

        @starting-style {
          /* transition from this on entry */
          translate: 100%;
          opacity: 0;
        }
      }
    }
  }

  .site-footer {
    text-align: center;
    background-color: var(--background-dark);
    /* padding top bottom */
    padding-block: 2rem;
    display: grid;
    gap: 2rem;

    a {
      text-decoration: none;
      color: var(--text-main);
    }

    a:hover,
    a:focus-visible {
      color: var(--text-brand-light);
    }
  }

  .site-footer__title {
    font-size: var(--font-size-md);
    font-family: var(--ff-heading);
    font-weight: 700;
  }

  .hero {
    text-align: center;
    font-size: var(--font-size-md);
    color: var(--text-high-contrast);
    background-image: url(assets/hero.webp);
    background-size: cover;
    background-position: center;

    /* animation when scroll out of view => fade out */
    animation: fade-out forwards;
    animation-timeline: view();
    animation-range-start: exit;
  }

  .hero__title {
    font-size: var(--font-size-heading-lg);

    span {
      font-size: var(--font-size-heading-xl);
      color: var(--text-brand);
      display: block;
    }
  }

  .mushroom-guide {
    /* custom property is inherited */
    --card-title-font-size: var(--font-size-lg);
    --card-title-color: var(--text-high-contrast);
    --card-gap: 0.75rem;
  }

  .faq-bento {
    --card-title-color: var(--text-high-contrast);

    display: grid;
    gap: 1rem;
    grid-template-areas:
      "card-one"
      "card-two"
      "card-three"
      "card-four";

    @media (width > 600px) {
      grid-template-columns: repeat(2, 1fr);
      grid-template-areas:
        "card-one card-two"
        "card-three card-four";
    }

    @media (width > 900px) {
      grid-template-columns: repeat(3, 1fr);
      grid-template-areas:
        "card-one   card-two   card-four"
        "card-three card-three card-four";
    }

    /* to make the image fill the gap on grid */
    .card > img {
      height: 100%;
      object-fit: cover;
    }

    @media (width > 600px) {
      .card:nth-child(even) img {
        /* moving the image order in the card grid */
        order: 3;
      }
    }

    .card:nth-child(1) {
      grid-area: card-one;
    }

    .card:nth-child(2) {
      grid-area: card-two;
    }

    .card:nth-child(3) {
      grid-area: card-three;

      @media (width > 900px) {
        display: grid;
        gap: 1rem;
        grid-template-columns: 1fr, 1fr;

        img {
          grid-column: 1 / 2;
          grid-row: 1 / 3;
        }

        h3 {
          grid-column: 2 / 3;
          grid-row: 1 / 2;
        }

        p {
          grid-column: 2 / 3;
          grid-row: 2 / 3;
        }
      }
    }

    .card:nth-child(4) {
      grid-area: card-four;
    }
  }

  .card {
    /* inherit property from .mushroom-guide */
    display: flex;
    flex-direction: column;
    gap: var(--card-gap, 1rem);
    padding: 1rem;
    background-color: var(--background-light);
    border-radius: var(--border-radius-3);

    img {
      border-radius: var(--border-radius-2);
    }
  }

  .card__title {
    /* inherit property from .mushroom-guide */
    font-size: var(--card-title-font-size, var(--font-size-heading-sm));
    color: var(--card-title-color, var(--text-brand));
  }

  .card__note {
    /* make the note stick to the bottom */
    margin-block-start: auto;
    background-color: var(--background-extra-light);
    padding: 0.75rem;
    border-radius: var(--border-radius-2);
  }

  .tag-list {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;

    li {
      padding: 0rem 0.25rem;
      border-radius: var(--border-radius-1);
      background-color: var(--tag-bg, var(--text-brand));
      font-family: var(--ff-heading);
      font-size: var(--font-size-sm);
      color: var(--text-high-contrast);
    }

    [data-edible="edible"] {
      --tag-bg: var(--background-accent-main);
    }

    [data-edible="toxic"] {
      --tag-bg: var(--clr-red-500);
    }

    [data-season="summer"] {
      --tag-bg: var(--background-accent-main);
    }

    [data-season="spring"] {
      --tag-bg: var(--clr-teal-500);
    }

    [data-season="fall"] {
      --tag-bg: var(--clr-orange-500);
    }
  }

  .button {
    display: inline-flex;
    padding: 0.5rem 1rem;
    cursor: pointer;
    text-decoration: none;
    background-color: var(--background-accent-main);
    font-family: var(--ff-heading);
    font-size: var(--font-size-md);
    font-weight: 700;
    border-radius: var(--border-radius-1);
  }

  .button:hover,
  .button:focus-visible {
    color: var(--text-high-contrast);
    background-color: var(--background-accent-light);
  }

  select {
    padding: 0.5rem 1rem;
    background-color: var(--background-accent-main);
    border: 0;
    border-radius: var(--border-radius-2);
    color: var(--text-high-contrast);
  }
}

@layer utilities {
  /* things that going to be used over and over again in different area */

  /* convenient way to hide display: none */
  [hidden] {
    display: none;
  }

  /* to help screen reader to know more information about the button/links for accessibility purposes */
  /* similar to .sr-only */
  .visually-hidden {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  .text-center {
    text-align: center;
  }
  .text-brand {
    color: var(--text-brand);
  }
  .text-high-contrast {
    color: var(--text-high-contrast);
  }

  .section-title {
    font-size: var(--font-size-heading-regular);
  }

  .background-base {
    background-color: var(--background-base);
  }
  .background-light {
    background-color: var(--background-light);
  }
  .background-extra-light {
    background-color: var(--background-extra-light);
  }
  .background-dark {
    background-color: var(--background-dark);
  }
  .background-extra-dark {
    background-color: var(--background-extra-dark);
  }

  .background-accent {
    background-color: var(--background-accent-dark);
  }

  .font-size-sm {
    font-size: var(--font-size-sm);
  }
  .font-size-regular {
    font-size: var(--font-size-regular);
  }
  .font-size-md {
    font-size: var(--font-size-md);
  }
  .font-size-lg {
    font-size: var(--font-size-lg);
  }

  /* to make element with class resizing and all it's child stop animation when screen resize */
  .resizing * {
    transition: none !important;
    animation: none !important;
    /* animation-play-state: paused; */
  }
}

/* scroll driven animation */
@keyframes fade-out {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
